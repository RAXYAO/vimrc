" Modeline and Notes {
" Based on spf13 and leoatchina-vim
" }

" Environment {
    " Windows Compatible {
    " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
    " across (heterogeneous) systems easier.
    if has('win32') || has('win64')
        " Be nice and check for multi_byte even if the config requires
        " multi_byte support most of the time
        if has("multi_byte")
            " Windows cmd.exe still uses cp850. If Windows ever moved to
            " Powershell as the primary terminal, this would be utf-8
            set termencoding=utf-8 " or =cp850
            " Let Vim use utf-8 internally, because many scripts require this
            set encoding=utf-8
            setglobal fileencoding=utf-8
            " - vim-bufferline: Already up to date.
            " fallback into cp1252 instead of eg. iso-8859-15.
            " Newer Windows files might contain utf-8 or utf-16 LE so we might
            " want to try them first.
            set fileencodings=ucs-bom,utf-8,utf-16le,cp1252,iso-8859-15
        endif
    endif
" }

" python setup {
    let g:python_version  = 0
    let g:pygments_import = 0
    let g:jedi_import     = 0
    if has('python3') && executable('python3')
        let g:python_version = 3
        if !WINDOWS()
            silent! python3 1
        endif
        if v:version == 704 && has('patch774') || v:version >= 800 || has('nvim')
            let g:python3_host_prog = exepath('python3')
        endif
    endif
    if has('python') && executable('python')
        let g:python_version = 2
        if !WINDOWS()
            silent! python 1
        endif
        if v:version == 704 && has('patch774') || v:version >= 800 || has('nvim')
            let g:python_host_prog = exepath('python')
        endif
    endif
" }

" plug function definition {
    " In your .vimrc.before.local file
    " list only the plugin groups you will use
    if !exists('g:plug_modules')
        let g:plug_modules=['general', 'writing', 'programming', 'java', 'python']
        "'php', 'ruby', 'misc', 'javascript', 'html', 'terminal']
    endif
    let g:complete_snippet = 'ultisnips'  "neosnippet
    let g:complete_engine = 'YCM'
    call add(plug_modules, complete_engine)
    function! HasModule(plug)
        return count(g:plug_modules, a:plug)
    endfunction
" }

" Plugs {
    " The next three lines ensure that the $VIM/vimfiles/plugged/ system works
    filetype off
    let $PLUG_PATH = expand('$VIM/vimfiles/plugged')
    set rtp+=$PLUG_PATH
    call plug#begin('$PLUG_PATH')
    " Deps {
        " Plug 'MarcWeber/vim-addon-mw-utils'
        " Plug 'tomtom/tlib_vim'
        " if executable('ag')
            " Plug 'mileszs/ack.vim'
            " let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'
        " elseif executable('ack-grep')
            " let g:ackprg="ack-grep -H --nocolor --nogroup --column"
            " Plug 'mileszs/ack.vim'
        " elseif executable('ack')
            " Plug 'mileszs/ack.vim'
        " endif
    " }


    " To override all the included plug, add the following to your
    " .vimrc.plug.local file:
    "   let g:override_spf13_plug = 1
    if !exists("g:override_spf13_plug")
        " General {
        if HasModule('general')
            Plug 'altercation/vim-colors-solarized'
            Plug 'mhinz/vim-startify', {'branch': 'master'}
            Plug 'scrooloose/nerdtree'
            Plug 'tpope/vim-surround'
            Plug 'jiangmiao/auto-pairs'
            Plug 'ctrlpvim/ctrlp.vim'
            Plug 'tacahiroy/ctrlp-funky'
            Plug 'terryma/vim-multiple-cursors'
            Plug 'vim-scripts/matchit.zip'
            Plug 'Yggdroot/indentLine'
            Plug 'skywind3000/asyncrun.vim'
            " Plug 'spf13/vim-colors'
            " Plug 'sheerun/vim-polyglot', {'branch': 'master'}
            " Plug 'sbdchd/neoformat', {'branch': 'master'}
            " Plug 'tpope/vim-abolish', {'branch': 'master'}
            " Plug 'tpope/vim-unimpaired', {'branch': 'master'}
            " Plug 'leshill/vim-json', {'branch': 'master'}
            " Plug 'tpope/vim-repeat'
            " Plug 'rhysd/conflict-marker.vim'
            " Plug 'thaerkh/vim-workspace'
            " Plug 'vim-scripts/sessionman.vim'
            " Plug 'ervandew/supertab'
            if (has("python") || has("python3")) && exists('g:spf13_use_powerline') && !exists('g:spf13_use_old_powerline')
                Plug 'Lokaltog/powerline', {'rtp':'/powerline/bindings/vim'}
            elseif exists('g:spf13_use_powerline') && exists('g:spf13_use_old_powerline')
                Plug 'Lokaltog/vim-powerline'
            else
                Plug 'vim-airline/vim-airline'
                Plug 'vim-airline/vim-airline-themes'
            endif
            Plug 'bling/vim-bufferline'
            Plug 'jistr/vim-nerdtree-tabs'
            Plug 'mbbill/undotree'
            " Plug 'kana/vim-textobj-user'
            " Plug 'kana/vim-textobj-indent'
            if !exists('g:spf13_no_views')
                Plug 'vim-scripts/restore_view.vim'
            endif
            " Plug 'flazz/vim-colorschemes'
            " Plug 'easymotion/vim-easymotion'
            " Plug 'powerline/fonts'
            " Plug 'nathanaelkane/vim-indent-guides'
            " Plug 'tpope/vim-abolish.vim'
            " Plug 'osyo-manga/vim-over'
            " Plug 'gcmt/wildfire.vim'
        endif
        " }

        " Writing {
        if HasModule('writing')
            Plug 'junegunn/vim-easy-align'
            Plug 'vimwiki/vimwiki'
            Plug 'lervag/vimtex'
            Plug 'SirVer/ultisnips'
            Plug 'honza/vim-snippets'
            " Plug 'reedes/vim-textobj-quote'
            " Plug 'reedes/vim-litecorrect'
            " Plug 'reedes/vim-textobj-sentence'
            " Plug 'tpope/vim-markdown', {'for':'markdown', 'branch': 'master'}
            " Plug 'reedes/vim-lexical'
            " Plug 'reedes/vim-wordy'
            " Plug 'ujihisa/neco-look'
            " Plug 'godlygeek/tabular'
        endif
        " }

        " julia language{
        if HasModule('julia') && executable('julia')
            Plug 'JuliaEditorSupport/julia-vim', {'branch': 'master', 'for': 'julia'}
        endif
        " }

        " markdown {
        if HasModule('markdown')
            if executable('node') && executable('yarn') && (v:version >= 801 || has('nvim')) && g:python_version == 3
                Plug 'iamcco/markdown-preview.nvim', {'for':'markdown', 'branch': 'master', 'do': 'cd app & yarn install'}
                Plug 'iamcco/mathjax-support-for-mkdp', {'for':'markdown', 'branch': 'master'}
                if g:python_version
                    Plug 'mzlogin/vim-markdown-toc', {'for':'markdown', 'branch': 'master'}
                endif
            elseif g:python_version
                Plug 'iamcco/markdown-preview.vim', {'for':'markdown', 'branch': 'master'}
                Plug 'iamcco/mathjax-support-for-mkdp', {'for':'markdown', 'branch': 'master'}
                if v:version >= 704 || has('nvim')
                    Plug 'mzlogin/vim-markdown-toc', {'for':'markdown', 'branch': 'master'}
                endif
            else
                Plug 'tpope/vim-markdown', {'for':'markdown', 'branch': 'master'}
            endif
        endif
        " }

        " General Programming {
        if HasModule('programming')
            " Pick one of the checksyntax, jslint, or syntastic
            Plug 'scrooloose/syntastic'
            Plug 'tpope/vim-fugitive'
            Plug 'scrooloose/nerdcommenter'
            Plug 'airblade/vim-gitgutter'
            " Plug 'mattn/webapi-vim'
            " Plug 'mattn/gist-vim'
            " Plug 'tpope/vim-commentary'
            " Plug 'luochen1990/rainbow'
            if executable('ctags')
                Plug 'majutsushi/tagbar'
            endif
        endif
        " }

        " complete engine {
        if HasModule('YCM')
            let b:ycm_install = " ./install.py "
            if HasModule('javascript') && executable('node')
                let b:ycm_install = b:ycm_install . " --ts-completer"
            endif
            if HasModule('c') && executable('clang')
                let b:ycm_install = b:ycm_install . " --clang-completer"
            endif
            if HasModule('go') && executable('go')
                let b:ycm_install = b:ycm_install . " --go-completer"
            endif
            if HasModule('rust') && executable('rust')
                let b:ycm_install = b:ycm_install . " --rust-completer"
            endif
            if HasModule('java') && executable('java')
                let b:ycm_install = b:ycm_install . " --java-completer"
            endif
            if g:python_version == 2
                Plug 'Valloric/YouCompleteMe',{'branch': 'master', 'do' : 'python2' . b:ycm_install}
            elseif g:python_version == 3
                Plug 'Valloric/YouCompleteMe',{'branch': 'master', 'do' : 'python3' . b:ycm_install}
            endif
        endif

        if HasModule('coc')
            function! CocInit()
                let b:coc_install_plugins = [
                            \ 'coc-json',
                            \ 'coc-dictionary',
                            \ 'coc-word',
                            \ 'coc-omni',
                            \ 'coc-tag',
                            \ 'coc-vimtex',
                            \ 'coc-lists',
                            \ 'coc-python',
                            \ 'coc-ultisnips',
                            \ 'coc-syntax'
                            \ ]
                if HasModule('web')
                    let b:coc_install_plugins = b:coc_install_plugins + [
                                \ 'coc-html',
                                \ 'coc-css',
                                \ 'coc-yaml',
                                \ 'coc-phpls',
                                \ 'coc-emmet',
                                \ 'coc-stylelint'
                                \ ]
                endif
                if HasModule('javascript')
                    let b:coc_install_plugins = b:coc_install_plugins + [
                                \ 'coc-eslint',
                                \ 'coc-tslint',
                                \ 'coc-tsserver',
                                \ 'coc-vetur'
                                \ ]
                endif
                if HasModule('java')
                    let b:coc_install_plugins = b:coc_install_plugins + ['coc-java']
                endif
                if HasModule('rust')
                    let b:coc_install_plugins = b:coc_install_plugins + ['coc-rls']
                endif
                if g:complete_snippet != 'None'
                    let b:coc_install_plugins = b:coc_install_plugins + ['coc-snippets']
                endif
                for plugin in b:coc_install_plugins
                    redraw
                    sleep 1000m
                    execute 'CocInstall '.plugin
                endfor
            endfunction
            command! -nargs=0 -bang CocInit call CocInit()
            Plug 'neoclide/coc.nvim', {'branch': 'master', 'do': 'yarn install --frozen-lockfile'}
            Plug 'neoclide/coc-neco', {'branch': 'master'}
            Plug 'jsfaint/coc-neoinclude', {'branch': 'master'}
        endif

        if HasModule('ncm2')
            " ncm2 prefer lcn
            Plug 'ncm2/ncm2', {'branch': 'master'}
            if has('nvim')
                Plug 'roxma/nvim-yarp', {'branch': 'master'}
            endif
            " main complete
            Plug 'ncm2/ncm2-bufword', {'branch': 'master'}
            Plug 'ncm2/ncm2-path', {'branch': 'master'}
            Plug 'ncm2/ncm2-tagprefix', {'branch': 'master'}
            Plug 'ncm2/ncm2-neoinclude', {'branch': 'master'}
            Plug 'filipekiss/ncm2-look.vim', {'branch': 'master'}
            Plug 'ncm2/ncm2-cssomni', {'branch': 'master', 'for':['css', 'css3']}
            if HasModule('gtags')
                Plug 'ncm2/ncm2-gtags', {'branch': 'master'}
            endif
            " language
            Plug 'ncm2/ncm2-vim', {'branch': 'master', 'for':'vim'}
            if g:jedi_import && !executable('pyls')
                Plug 'ncm2/ncm2-jedi', {'branch': 'master'}
            endif
            if HasModule('javascript') && executable('tern') && !executable('javascript-typescript-stdio')
                Plug 'ncm2/ncm2-tern', {'branch': 'master', 'for':['javascript', 'typescript']}
            endif
            if HasModule('go') && executable('gocode') && !executable('go-langserver')
                Plug 'ncm2/ncm2-go', {'branch': 'master', 'for':'go'}
            endif
            if HasModule('rust') && executable('racer') && !executable('rls')
                Plug 'ncm2/ncm2-racer', {'branch': 'master', 'for':'rust'}
            endif
            if HasModule('c') && executable('clang') && !(executable('ccls') || executable('cquery'))
                Plug 'ncm2/ncm2-pyclang', {'branch': 'master', 'for':['c', 'cpp']}
            endif
            if HasModule('java')
                Plug 'ObserverOfTime/ncm2-jc2', {'branch': 'master', 'for': ['java', 'jsp']}
            endif
            " snippet
            if g:complete_snippet == 'ultisnips'
                Plug 'ncm2/ncm2-ultisnips', {'branch': 'master'}
            elseif g:complete_snippet == 'neosnippet'
                Plug 'ncm2/ncm2-neosnippet', {'branch': 'master'}
            endif
            " LCN
            if WINDOWS()
                Plug 'autozimu/LanguageClient-neovim', {'branch': 'next', 'do': './install.ps1'}
            else
                Plug 'autozimu/LanguageClient-neovim', {'branch': 'next', 'do': './install.sh'}
            endif
        endif

        if HasModule('asyncomplete')
            Plug 'prabirshrestha/vim-lsp', {'branch': 'master'}
            Plug 'prabirshrestha/asyncomplete-lsp.vim', {'branch': 'master'}
            Plug 'prabirshrestha/asyncomplete.vim', {'branch': 'master'}
            Plug 'prabirshrestha/async.vim', {'branch': 'master'}
            Plug 'prabirshrestha/asyncomplete-file.vim', {'branch': 'master'}
            Plug 'prabirshrestha/asyncomplete-buffer.vim', {'branch': 'master'}
            Plug 'yami-beta/asyncomplete-omni.vim', {'branch': 'master'}
            " vim
            Plug 'prabirshrestha/asyncomplete-necovim.vim', {'branch': 'master'}
            Plug 'prabirshrestha/asyncomplete-necosyntax.vim', {'branch': 'master'}
            " ctags
            if executable('ctags')
                Plug 'prabirshrestha/asyncomplete-tags.vim', {'branch': 'master'}
            endif
            if g:complete_snippet == 'ultisnips'
                Plug 'prabirshrestha/asyncomplete-ultisnips.vim', {'branch': 'master'}
            elseif g:complete_snippet == 'neosnippet'
                Plug 'prabirshrestha/asyncomplete-neosnippet.vim', {'branch': 'master'}
            endif
            if HasModule('go') && executable('gocode')
                Plug 'prabirshrestha/asyncomplete-gocode.vim', {'branch': 'master'}
            endif
            if HasModule('rust') && executable('racer')
                Plug 'keremc/asyncomplete-racer.vim', {'branch': 'master'}
            endif
            if HasModule('javascript') && executable('typescript-language-server')
                Plug 'ryanolsonx/vim-lsp-typescript', {'branch': 'master'}
            endif
        endif

        if HasModule('neocomplete')
            Plug 'Shougo/neocomplete.vim', {'branch': 'master'}
            if g:jedi_import
                Plug 'davidhalter/jedi-vim', {'for': 'python', 'branch': 'master'}
            endif
            if HasModule('c') && executable('clang')
                Plug 'Rip-Rip/clang_complete', {'branch': 'master'}
            endif
            if HasModule('rust') && executable('racer')
                Plug 'racer-rust/vim-racer', {'for': 'rust', 'branch': 'master'}
            endif
            if HasModule('javascript') && executable('tern')
                Plug 'ternjs/tern_for_vim', {'branch': 'master'}
                Plug 'Quramy/tsuquyomi', {'branch': 'master'}
            endif
        endif

        if HasModule('neocomplcache')
            Plug 'Shougo/neocomplcache.vim', {'branch': 'master'}
            if g:jedi_import
                Plug 'davidhalter/jedi-vim', {'for': 'python', 'branch': 'master'}
            endif
            if HasModule('c') && executable('clang')
                Plug 'Rip-Rip/clang_complete', {'branch': 'master'}
            endif
            if g:complete_snippet == "ultisnips"
                Plug 'JazzCore/neocomplcache-ultisnips', {'branch': 'master'}
            endif
        endif
        " }

        if HasModule('mucomplete')
            Plug 'lifepillar/vim-mucomplete'
            " Plug 'vim-scripts/AutoComplPop'
        endif

        " Python {
        if HasModule('python')
            " Pick either python-mode or pyflakes & pydoc
            " Plug 'klen/python-mode'
            Plug 'yssource/python.vim'
            Plug 'davidhalter/jedi-vim'
            "Plug 'python_match.vim'
            "Plug 'pythoncomplete'
        endif
        " }

        " PHP {
        if HasModule('php')
            Plug 'spf13/PIV'
            Plug 'arnaud-lb/vim-php-namespace'
            Plug 'beyondwords/vim-twig'
        endif
        " }

        " Javascript {
        if HasModule('javascript')
            Plug 'elzr/vim-json'
            Plug 'groenewege/vim-less'
            Plug 'pangloss/vim-javascript'
            Plug 'briancollins/vim-jst'
            Plug 'kchmck/vim-coffee-script'
        endif
        " }

        " Scala {
        if HasModule('scala')
            Plug 'derekwyatt/vim-scala'
            Plug 'derekwyatt/vim-sbt'
            Plug 'xptemplate'
        endif
        " }

        " Haskell {
        if HasModule('haskell')
            Plug 'travitch/hasksyn'
            Plug 'dag/vim2hs'
            Plug 'Twinside/vim-haskellConceal'
            Plug 'Twinside/vim-haskellFold'
            Plug 'lukerandall/haskellmode-vim'
            Plug 'eagletmt/neco-ghc'
            Plug 'eagletmt/ghcmod-vim'
            Plug 'Shougo/vimproc.vim'
            Plug 'adinapoli/cumino'
            Plug 'bitc/vim-hdevtools'
        endif
        " }

        " html {
        if HasModule('html')
            plug 'amirh/html-autoclosetag'
            plug 'hail2u/vim-css3-syntax'
            plug 'gorodinskiy/vim-coloresque'
            plug 'tpope/vim-haml'
            plug 'mattn/emmet-vim'
        endif
        " }

        " ruby {
        if HasModule('ruby')
            plug 'tpope/vim-rails'
            let g:rubycomplete_buffer_loading = 1
            "let g:rubycomplete_classes_in_global = 1
            "let g:rubycomplete_rails = 1
        endif
        " }

        " puppet {
        if HasModule('puppet')
            plug 'rodjek/vim-puppet'
        endif
        " }

        " go lang {
        if HasModule('go')
            "plug 'blackrush/vim-gocode'
            plug 'fatih/vim-go'
        endif
        " }

        " elixir {
        if HasModule('elixir')
            plug 'elixir-lang/vim-elixir'
            plug 'carlosgaldino/elixir-snippets'
            plug 'mattreduce/vim-mix'
        endif
        " }


        " Misc {
        if HasModule('misc')
            Plug 'rust-lang/rust.vim'
            Plug 'spf13/vim-preview'
            Plug 'tpope/vim-cucumber'
            Plug 'cespare/vim-toml'
            Plug 'quentindecock/vim-cucumber-align-pipes'
            Plug 'saltstack/salt-vim'
            Plug 'jalvesaq/vimcmdline'
        endif
        " }


        " Use fork plug config if available {
        if filereadable(expand("$VIM/.vimrc.plug.fork"))
            source $VIM/.vimrc.plug.fork
        endif
        " }

        " Use local plug config if available {
        if filereadable(expand("$VIM/.vimrc.plug.local"))
            source $VIM/.vimrc.plug.local
        endif
        " }
    endif
    call plug#end()
" }

